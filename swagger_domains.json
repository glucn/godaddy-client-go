{
  "swagger": "2.0",
  "tags": [
    {
      "name": "v1",
      "description": ""
    },
    {
      "name": "v2",
      "description": ""
    }
  ],
  "host": "api.ote-godaddy.com",
  "paths": {
    "/v1/domains": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID whose domains are to be retrieved",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only include results with `status` value in the specified set",
            "in": "query",
            "items": {
              "enum": [
                "ACTIVE",
                "AWAITING_CLAIM_ACK",
                "AWAITING_DOCUMENT_AFTER_TRANSFER",
                "AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT",
                "AWAITING_DOCUMENT_UPLOAD",
                "AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY",
                "AWAITING_PAYMENT",
                "AWAITING_RENEWAL_TRANSFER_IN_COMPLETE",
                "AWAITING_TRANSFER_IN_ACK",
                "AWAITING_TRANSFER_IN_AUTH",
                "AWAITING_TRANSFER_IN_AUTO",
                "AWAITING_TRANSFER_IN_WHOIS",
                "AWAITING_TRANSFER_IN_WHOIS_FIX",
                "AWAITING_VERIFICATION_ICANN",
                "AWAITING_VERIFICATION_ICANN_MANUAL",
                "CANCELLED",
                "CANCELLED_HELD",
                "CANCELLED_REDEEMABLE",
                "CANCELLED_TRANSFER",
                "CONFISCATED",
                "DISABLED_SPECIAL",
                "EXCLUDED_INVALID_CLAIM_FIREHOSE",
                "EXPIRED_REASSIGNED",
                "FAILED_BACKORDER_CAPTURE",
                "FAILED_DROP_IMMEDIATE_THEN_ADD",
                "FAILED_PRE_REGISTRATION",
                "FAILED_REDEMPTION",
                "FAILED_REDEMPTION_REPORT",
                "FAILED_REGISTRATION",
                "FAILED_REGISTRATION_FIREHOSE",
                "FAILED_RESTORATION_REDEMPTION_MOCK",
                "FAILED_SETUP",
                "FAILED_TRANSFER_IN",
                "FAILED_TRANSFER_IN_BAD_STATUS",
                "FAILED_TRANSFER_IN_REGISTRY",
                "HELD_COURT_ORDERED",
                "HELD_DISPUTED",
                "HELD_EXPIRATION_PROTECTION",
                "HELD_EXPIRED_REDEMPTION_MOCK",
                "HELD_REGISTRAR_ADD",
                "HELD_REGISTRAR_REMOVE",
                "HELD_SHOPPER",
                "HELD_TEMPORARY",
                "LOCKED_ABUSE",
                "LOCKED_COPYRIGHT",
                "LOCKED_REGISTRY",
                "LOCKED_SUPER",
                "PARKED_AND_HELD",
                "PARKED_EXPIRED",
                "PARKED_VERIFICATION_ICANN",
                "PENDING_ABORT_CANCEL_SETUP",
                "PENDING_AGREEMENT_PRE_REGISTRATION",
                "PENDING_APPLY_RENEWAL_CREDITS",
                "PENDING_BACKORDER_CAPTURE",
                "PENDING_BLOCKED_REGISTRY",
                "PENDING_CANCEL_REGISTRANT_PROFILE",
                "PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT",
                "PENDING_COMPLETE_REGISTRANT_PROFILE",
                "PENDING_COO",
                "PENDING_COO_COMPLETE",
                "PENDING_DNS",
                "PENDING_DNS_ACTIVE",
                "PENDING_DNS_INACTIVE",
                "PENDING_DOCUMENT_VALIDATION",
                "PENDING_DOCUMENT_VERIFICATION",
                "PENDING_DROP_IMMEDIATE",
                "PENDING_DROP_IMMEDIATE_THEN_ADD",
                "PENDING_EPP_CREATE",
                "PENDING_EPP_DELETE",
                "PENDING_EPP_UPDATE",
                "PENDING_ESCALATION_REGISTRY",
                "PENDING_EXPIRATION",
                "PENDING_EXPIRATION_RESPONSE",
                "PENDING_EXPIRATION_SYNC",
                "PENDING_EXPIRED_REASSIGNMENT",
                "PENDING_EXPIRE_AUTO_ADD",
                "PENDING_EXTEND_REGISTRANT_PROFILE",
                "PENDING_FAILED_COO",
                "PENDING_FAILED_EPP_CREATE",
                "PENDING_FAILED_HELD",
                "PENDING_FAILED_PURCHASE_PREMIUM",
                "PENDING_FAILED_RECONCILE_FIREHOSE",
                "PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT",
                "PENDING_FAILED_RELEASE_PREMIUM",
                "PENDING_FAILED_RENEW_EXPIRATION_PROTECTION",
                "PENDING_FAILED_RESERVE_PREMIUM",
                "PENDING_FAILED_SUBMIT_FIREHOSE",
                "PENDING_FAILED_TRANSFER_ACK_PREMIUM",
                "PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM",
                "PENDING_FAILED_TRANSFER_IN_PREMIUM",
                "PENDING_FAILED_TRANSFER_PREMIUM",
                "PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM",
                "PENDING_FAILED_UNLOCK_PREMIUM",
                "PENDING_FAILED_UPDATE_API",
                "PENDING_FRAUD_VERIFICATION",
                "PENDING_FRAUD_VERIFIED",
                "PENDING_GET_CONTACTS",
                "PENDING_GET_HOSTS",
                "PENDING_GET_NAME_SERVERS",
                "PENDING_GET_STATUS",
                "PENDING_HOLD_ESCROW",
                "PENDING_HOLD_REDEMPTION",
                "PENDING_LOCK_CLIENT_REMOVE",
                "PENDING_LOCK_DATA_QUALITY",
                "PENDING_LOCK_THEN_HOLD_REDEMPTION",
                "PENDING_PARKING_DETERMINATION",
                "PENDING_PARK_INVALID_WHOIS",
                "PENDING_PARK_INVALID_WHOIS_REMOVAL",
                "PENDING_PURCHASE_PREMIUM",
                "PENDING_RECONCILE",
                "PENDING_RECONCILE_FIREHOSE",
                "PENDING_REDEMPTION",
                "PENDING_REDEMPTION_REPORT",
                "PENDING_REDEMPTION_REPORT_COMPLETE",
                "PENDING_REDEMPTION_REPORT_SUBMITTED",
                "PENDING_REDEMPTION_WITHOUT_RECEIPT",
                "PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK",
                "PENDING_RELEASE_PREMIUM",
                "PENDING_REMOVAL",
                "PENDING_REMOVAL_HELD",
                "PENDING_REMOVAL_PARKED",
                "PENDING_REMOVAL_UNPARK",
                "PENDING_RENEWAL",
                "PENDING_RENEW_EXPIRATION_PROTECTION",
                "PENDING_RENEW_INFINITE",
                "PENDING_RENEW_LOCKED",
                "PENDING_RENEW_WITHOUT_RECEIPT",
                "PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT",
                "PENDING_RESERVE_PREMIUM",
                "PENDING_RESET_VERIFICATION_ICANN",
                "PENDING_RESPONSE_FIREHOSE",
                "PENDING_RESTORATION",
                "PENDING_RESTORATION_INACTIVE",
                "PENDING_RESTORATION_REDEMPTION_MOCK",
                "PENDING_RETRY_EPP_CREATE",
                "PENDING_RETRY_HELD",
                "PENDING_SEND_AUTH_CODE",
                "PENDING_SETUP",
                "PENDING_SETUP_ABANDON",
                "PENDING_SETUP_AGREEMENT_LANDRUSH",
                "PENDING_SETUP_AGREEMENT_SUNRISE2_A",
                "PENDING_SETUP_AGREEMENT_SUNRISE2_B",
                "PENDING_SETUP_AGREEMENT_SUNRISE2_C",
                "PENDING_SETUP_AUTH",
                "PENDING_SETUP_DNS",
                "PENDING_SETUP_FAILED",
                "PENDING_SETUP_REVIEW",
                "PENDING_SETUP_SUNRISE",
                "PENDING_SETUP_SUNRISE_PRE",
                "PENDING_SETUP_SUNRISE_RESPONSE",
                "PENDING_SUBMIT_FAILURE",
                "PENDING_SUBMIT_FIREHOSE",
                "PENDING_SUBMIT_HOLD_FIREHOSE",
                "PENDING_SUBMIT_HOLD_LANDRUSH",
                "PENDING_SUBMIT_HOLD_SUNRISE",
                "PENDING_SUBMIT_LANDRUSH",
                "PENDING_SUBMIT_RESPONSE_FIREHOSE",
                "PENDING_SUBMIT_RESPONSE_LANDRUSH",
                "PENDING_SUBMIT_RESPONSE_SUNRISE",
                "PENDING_SUBMIT_SUCCESS_FIREHOSE",
                "PENDING_SUBMIT_SUCCESS_LANDRUSH",
                "PENDING_SUBMIT_SUCCESS_SUNRISE",
                "PENDING_SUBMIT_SUNRISE",
                "PENDING_SUBMIT_WAITING_LANDRUSH",
                "PENDING_SUCCESS_PRE_REGISTRATION",
                "PENDING_SUSPENDED_DATA_QUALITY",
                "PENDING_TRANSFER_ACK_PREMIUM",
                "PENDING_TRANSFER_IN",
                "PENDING_TRANSFER_IN_ACK",
                "PENDING_TRANSFER_IN_ACK_PREMIUM",
                "PENDING_TRANSFER_IN_BAD_REGISTRANT",
                "PENDING_TRANSFER_IN_CANCEL",
                "PENDING_TRANSFER_IN_CANCEL_REGISTRY",
                "PENDING_TRANSFER_IN_COMPLETE_ACK",
                "PENDING_TRANSFER_IN_DELETE",
                "PENDING_TRANSFER_IN_LOCK",
                "PENDING_TRANSFER_IN_NACK",
                "PENDING_TRANSFER_IN_NOTIFICATION",
                "PENDING_TRANSFER_IN_PREMIUM",
                "PENDING_TRANSFER_IN_RELEASE",
                "PENDING_TRANSFER_IN_RESPONSE",
                "PENDING_TRANSFER_IN_UNDERAGE",
                "PENDING_TRANSFER_OUT",
                "PENDING_TRANSFER_OUT_ACK",
                "PENDING_TRANSFER_OUT_NACK",
                "PENDING_TRANSFER_OUT_PREMIUM",
                "PENDING_TRANSFER_OUT_UNDERAGE",
                "PENDING_TRANSFER_OUT_VALIDATION",
                "PENDING_TRANSFER_PREMIUM",
                "PENDING_TRANSFER_PREMUIM",
                "PENDING_TRANSFER_SUBMIT_PREMIUM",
                "PENDING_UNLOCK_DATA_QUALITY",
                "PENDING_UNLOCK_PREMIUM",
                "PENDING_UPDATE",
                "PENDING_UPDATED_REGISTRANT_DATA_QUALITY",
                "PENDING_UPDATE_ACCOUNT",
                "PENDING_UPDATE_API",
                "PENDING_UPDATE_API_RESPONSE",
                "PENDING_UPDATE_AUTH",
                "PENDING_UPDATE_CONTACTS",
                "PENDING_UPDATE_CONTACTS_PRIVACY",
                "PENDING_UPDATE_DNS",
                "PENDING_UPDATE_DNS_SECURITY",
                "PENDING_UPDATE_ELIGIBILITY",
                "PENDING_UPDATE_EPP_CONTACTS",
                "PENDING_UPDATE_MEMBERSHIP",
                "PENDING_UPDATE_OWNERSHIP",
                "PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION",
                "PENDING_UPDATE_OWNERSHIP_HELD",
                "PENDING_UPDATE_REGISTRANT",
                "PENDING_UPDATE_REPO",
                "PENDING_VALIDATION_DATA_QUALITY",
                "PENDING_VERIFICATION_FRAUD",
                "PENDING_VERIFICATION_STATUS",
                "PENDING_VERIFY_REGISTRANT_DATA_QUALITY",
                "RESERVED",
                "RESERVED_PREMIUM",
                "REVERTED",
                "SUSPENDED_VERIFICATION_ICANN",
                "TRANSFERRED_OUT",
                "UNLOCKED_ABUSE",
                "UNLOCKED_SUPER",
                "UNPARKED_AND_UNHELD",
                "UPDATED_OWNERSHIP",
                "UPDATED_OWNERSHIP_HELD"
              ],
              "type": "string"
            },
            "name": "statuses",
            "required": false,
            "type": "array"
          },
          {
            "description": "Only include results with `status` value in any of the specified groups",
            "in": "query",
            "items": {
              "enum": [
                "INACTIVE",
                "PRE_REGISTRATION",
                "REDEMPTION",
                "RENEWABLE",
                "VERIFICATION_ICANN",
                "VISIBLE"
              ],
              "type": "string"
            },
            "name": "statusGroups",
            "required": false,
            "type": "array"
          },
          {
            "description": "Maximum number of domains to return",
            "in": "query",
            "maximum": 1000,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Marker Domain to use as the offset in results",
            "in": "query",
            "name": "marker",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional details to be included in the response",
            "in": "query",
            "items": {
              "enum": [
                "authCode",
                "contacts",
                "nameServers"
              ],
              "type": "string"
            },
            "name": "includes",
            "required": false,
            "type": "array"
          },
          {
            "description": "Only include results that have been modified since the specified date",
            "format": "iso-datetime",
            "in": "query",
            "name": "modifiedDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/DomainSummary"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Limit must have a value no greater than 1000",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "list",
        "summary": "Retrieve a list of Domains for the specified Shopper"
      }
    },
    "/v1/domains/agreements": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "default": "en-US",
            "description": "Unique identifier of the Market used to retrieve/translate Legal Agreements",
            "format": "bcp-47",
            "in": "header",
            "name": "X-Market-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "list of TLDs whose legal agreements are to be retrieved",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tlds",
            "required": true,
            "type": "array"
          },
          {
            "description": "Whether or not privacy has been requested",
            "in": "query",
            "name": "privacy",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Whether or not domain tranfer has been requested",
            "in": "query",
            "name": "forTransfer",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/LegalAgreement"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "getAgreement",
        "summary": "Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons"
      }
    },
    "/v1/domains/available": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Domain name whose availability is to be checked",
            "in": "query",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "default": "FAST",
            "description": "Optimize for time ('FAST') or accuracy ('FULL')",
            "enum": [
              "FAST",
              "FULL",
              "fast",
              "full"
            ],
            "in": "query",
            "name": "checkType",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether or not to include domains available for transfer. If set to True, checkType is ignored",
            "in": "query",
            "name": "forTransfer",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainAvailableResponse"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dashbr>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>domain must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "available",
        "summary": "Determine whether or not the specified domain is available for purchase"
      },
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Domain names for which to check availability",
            "in": "body",
            "name": "domains",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "maximum": 500,
              "type": "array"
            }
          },
          {
            "default": "FAST",
            "description": "Optimize for time ('FAST') or accuracy ('FULL')",
            "enum": [
              "FAST",
              "FULL",
              "fast",
              "full"
            ],
            "in": "query",
            "name": "checkType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainAvailableBulk"
            }
          },
          "203": {
            "description": "Request was partially successful",
            "schema": {
              "$ref": "#/definitions/DomainAvailableBulkMixed"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>Reserved name error<br>domain must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "availableBulk",
        "summary": "Determine whether or not the specified domains are available for purchase"
      }
    },
    "/v1/domains/contacts/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "default": 1,
            "description": "PrivateLabelId to operate as, if different from JWT",
            "in": "header",
            "name": "X-Private-Label-Id",
            "required": false,
            "type": "integer"
          },
          {
            "default": "en-US",
            "description": "MarketId in which the request is being made, and for which responses should be localized",
            "format": "bcp-47",
            "in": "query",
            "name": "marketId",
            "required": false,
            "type": "string"
          },
          {
            "description": "An instance document expected for domains contacts validation",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainsContactsBulk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Request body doesn't fulfill schema, see details in `fields`",
            "schema": {
              "$ref": "#/definitions/ErrorDomainContactsValidate"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "description": "All contacts specified in request will be validated against all domains specifed in \"domains\". As an alternative, you can also pass in tlds, with the exception of `uk`, which requires full domain names",
        "operationId": "ContactsValidate",
        "summary": "Validate the request body using the Domain Contact Validation Schema for specified domains."
      }
    },
    "/v1/domains/purchase": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Shopper for whom the domain should be purchased",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "An instance document expected to match the JSON schema returned by `./schema/{tld}`",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainPurchase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainPurchaseResponse"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "domain must be specified<br>Based on restrictions declared in JSON schema returned by `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>`body` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "purchase",
        "summary": "Purchase and register the specified Domain"
      }
    },
    "/v1/domains/purchase/schema/{tld}": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Top-Level Domain whose schema should be retrieved",
            "in": "path",
            "name": "tld",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/JsonSchema"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`tld` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "schema",
        "summary": "Retrieve the schema to be submitted when registering a Domain for the specified TLD"
      }
    },
    "/v1/domains/purchase/validate": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "An instance document expected to match the JSON schema returned by `./schema/{tld}`",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainPurchase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Based on restrictions declared in JSON schema returned by `./schema/{tld}`",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "validate",
        "summary": "Validate the request body using the Domain Purchase Schema for the specified TLD"
      }
    },
    "/v1/domains/suggest": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID for which the suggestions are being generated",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain name or set of keywords for which alternative domain names will be suggested",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Two-letter ISO country code to be used as a hint for target region<br/><br/>\nNOTE: These are sample values, there are many\n<a href=\"http://www.iso.org/iso/country_codes.htm\">more</a>",
            "enum": [
              "AC",
              "AD",
              "AE",
              "AF",
              "AG",
              "AI",
              "AL",
              "AM",
              "AO",
              "AQ",
              "AR",
              "AS",
              "AT",
              "AU",
              "AW",
              "AX",
              "AZ",
              "BA",
              "BB",
              "BD",
              "BE",
              "BF",
              "BG",
              "BH",
              "BI",
              "BJ",
              "BM",
              "BN",
              "BO",
              "BQ",
              "BR",
              "BS",
              "BT",
              "BV",
              "BW",
              "BY",
              "BZ",
              "CA",
              "CC",
              "CD",
              "CF",
              "CG",
              "CH",
              "CI",
              "CK",
              "CL",
              "CM",
              "CN",
              "CO",
              "CR",
              "CV",
              "CW",
              "CX",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DK",
              "DM",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EG",
              "EH",
              "ER",
              "ES",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FM",
              "FO",
              "FR",
              "GA",
              "GB",
              "GD",
              "GE",
              "GF",
              "GG",
              "GH",
              "GI",
              "GL",
              "GM",
              "GN",
              "GP",
              "GQ",
              "GR",
              "GS",
              "GT",
              "GU",
              "GW",
              "GY",
              "HK",
              "HM",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IE",
              "IL",
              "IM",
              "IN",
              "IO",
              "IQ",
              "IS",
              "IT",
              "JE",
              "JM",
              "JO",
              "JP",
              "KE",
              "KG",
              "KH",
              "KI",
              "KM",
              "KN",
              "KR",
              "KV",
              "KW",
              "KY",
              "KZ",
              "LA",
              "LB",
              "LC",
              "LI",
              "LK",
              "LR",
              "LS",
              "LT",
              "LU",
              "LV",
              "LY",
              "MA",
              "MC",
              "MD",
              "ME",
              "MG",
              "MH",
              "MK",
              "ML",
              "MM",
              "MN",
              "MO",
              "MP",
              "MQ",
              "MR",
              "MS",
              "MT",
              "MU",
              "MV",
              "MW",
              "MX",
              "MY",
              "MZ",
              "NA",
              "NC",
              "NE",
              "NF",
              "NG",
              "NI",
              "NL",
              "NO",
              "NP",
              "NR",
              "NU",
              "NZ",
              "OM",
              "PA",
              "PE",
              "PF",
              "PG",
              "PH",
              "PK",
              "PL",
              "PM",
              "PN",
              "PR",
              "PS",
              "PT",
              "PW",
              "PY",
              "QA",
              "RE",
              "RO",
              "RS",
              "RU",
              "RW",
              "SA",
              "SB",
              "SC",
              "SE",
              "SG",
              "SH",
              "SI",
              "SJ",
              "SK",
              "SL",
              "SM",
              "SN",
              "SO",
              "SR",
              "ST",
              "SV",
              "SX",
              "SZ",
              "TC",
              "TD",
              "TF",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TL",
              "TM",
              "TN",
              "TO",
              "TP",
              "TR",
              "TT",
              "TV",
              "TW",
              "TZ",
              "UA",
              "UG",
              "UM",
              "US",
              "UY",
              "UZ",
              "VA",
              "VC",
              "VE",
              "VG",
              "VI",
              "VN",
              "VU",
              "WF",
              "WS",
              "YE",
              "YT",
              "ZA",
              "ZM",
              "ZW"
            ],
            "format": "iso-country-code",
            "in": "query",
            "name": "country",
            "required": false,
            "type": "string"
          },
          {
            "description": "Name of city to be used as a hint for target region",
            "format": "city-name",
            "in": "query",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sources to be queried<br/><br/><ul>\n<li><strong>CC_TLD</strong> - Varies the TLD using Country Codes</li>\n<li><strong>EXTENSION</strong> - Varies the TLD</li>\n<li><strong>KEYWORD_SPIN</strong> - Identifies keywords and then rotates each one</li>\n<li><strong>PREMIUM</strong> - Includes variations with premium prices</li></ul>",
            "in": "query",
            "items": {
              "enum": [
                "CC_TLD",
                "EXTENSION",
                "KEYWORD_SPIN",
                "PREMIUM",
                "cctld",
                "extension",
                "keywordspin",
                "premium"
              ],
              "type": "string"
            },
            "name": "sources",
            "required": false,
            "type": "array"
          },
          {
            "description": "Top-level domains to be included in suggestions<br/><br/>\nNOTE: These are sample values, there are many\n<a href=\"http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\">more</a>",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "tlds",
            "required": false,
            "type": "array"
          },
          {
            "description": "Maximum length of second-level domain",
            "in": "query",
            "name": "lengthMax",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Minimum length of second-level domain",
            "in": "query",
            "name": "lengthMin",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of suggestions to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Maximum amount of time, in milliseconds, to wait for responses\nIf elapses, return the results compiled up to that point",
            "format": "integer-positive",
            "in": "query",
            "name": "waitMs",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/DomainSuggestion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`query` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "suggest",
        "summary": "Suggest alternate Domain names based on a seed Domain, a set of keywords, or the shopper's purchase history"
      }
    },
    "/v1/domains/tlds": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/TldSummary"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "tlds",
        "summary": "Retrieves a list of TLDs supported and enabled for sale"
      }
    },
    "/v1/domains/{domain}": {
      "delete": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Domain to cancel",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The domain does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Unknown domain error<br>At least two apex (aka @) `nameServers` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "cancel",
        "summary": "Cancel a purchased domain"
      },
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID expected to own the specified domain",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain name whose details are to be retrieved",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainDetail"
            }
          },
          "203": {
            "description": "Request was partially successful, see verifications.status for further detail",
            "schema": {
              "$ref": "#/definitions/DomainDetail"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`domain` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "get",
        "summary": "Retrieve details for the specified Domain"
      },
      "patch": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Domain whose details are to be updated",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Changes to apply to existing Domain",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Specified Subaccount not owned by authenticated Shopper",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The given domain is not eligible to have its nameservers changed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "At least two apex (aka @) `nameServers` must be specified<br>Failed to update nameservers",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "update",
        "summary": "Update details for the specified Domain"
      }
    },
    "/v1/domains/{domain}/contacts": {
      "patch": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose Contacts are to be updated.",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Changes to apply to existing Contacts",
            "in": "body",
            "name": "contacts",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainContacts"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Domain not found<br>Identity document not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`domain` is not a valid Domain name",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "updateContacts",
        "summary": "Update domain"
      }
    },
    "/v1/domains/{domain}/privacy": {
      "delete": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID of the owner of the domain",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose privacy is to be cancelled",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The domain does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Customer has purchased Domain Ownership Protection and the domain has expired<br>The domain status does not allow performing the operation<br>Unknown domain error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "cancelPrivacy",
        "summary": "Submit a privacy cancellation request for the given domain"
      }
    },
    "/v1/domains/{domain}/privacy/purchase": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID of the owner of the domain",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain for which to purchase privacy",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Options for purchasing privacy",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivacyPurchase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainPurchaseResponse"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The domain status does not allow performing the operation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "End-user must read and consent to all of the following legal agreements<br>`domain` must match `sld.tld`",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "purchasePrivacy",
        "summary": "Purchase privacy for a specified domain"
      }
    },
    "/v1/domains/{domain}/records": {
      "patch": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose DNS Records are to be augmented",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Records to add to whatever currently exists",
            "in": "body",
            "name": "records",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArrayOfDNSRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`domain` is not a valid Domain name",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "recordAdd",
        "summary": "Add the specified DNS Records to the specified Domain"
      },
      "put": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose DNS Records are to be replaced",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Records to replace whatever currently exists",
            "in": "body",
            "name": "records",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/DNSRecord"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`domain` is not a valid Domain name<br>`record` does not fulfill the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "recordReplace",
        "summary": "Replace all DNS Records for the specified Domain"
      }
    },
    "/v1/domains/{domain}/records/{type}/{name}": {
      "get": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose DNS Records are to be retrieved",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Record Type for which DNS Records are to be retrieved",
            "enum": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "NS",
              "SOA",
              "SRV",
              "TXT"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Record Name for which DNS Records are to be retrieved",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Number of results to skip for pagination",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Maximum number of items to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/DNSRecord"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`record` does not fulfill the schema<br>`domain` is not a valid Domain name",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "recordGet",
        "summary": "Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name"
      },
      "put": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose DNS Records are to be replaced",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Record Type for which DNS Records are to be replaced",
            "enum": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "NS",
              "SOA",
              "SRV",
              "TXT"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Record Name for which DNS Records are to be replaced",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Records to replace whatever currently exists",
            "in": "body",
            "name": "records",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/DNSRecordCreateTypeName"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`record` does not fulfill the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "recordReplaceTypeName",
        "summary": "Replace all DNS Records for the specified Domain with the specified Type and Name"
      }
    },
    "/v1/domains/{domain}/records/{type}": {
      "put": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose DNS Records are to be replaced",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Record Type for which DNS Records are to be replaced",
            "enum": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "NS",
              "SOA",
              "SRV",
              "TXT"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "DNS Records to replace whatever currently exists",
            "in": "body",
            "name": "records",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/DNSRecordCreateType"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`record` does not fulfill the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "recordReplaceType",
        "summary": "Replace all DNS Records for the specified Domain with the specified Type"
      }
    },
    "/v1/domains/{domain}/renew": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain to renew",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Options for renewing existing Domain",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainRenew"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainPurchaseResponse"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The domain status does not allow performing the operation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "End-user must read and consent to all of the following legal agreements<br>`domain` must match `sld.tld`",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "renew",
        "summary": "Renew the specified Domain"
      }
    },
    "/v1/domains/{domain}/transfer": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The Shopper to whom the domain should be transfered",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain to transfer in",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "Details for domain transfer purchase",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainTransferIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "$ref": "#/definitions/DomainPurchaseResponse"
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "`domain` (domain) isn't available for transfer",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Based on restrictions declared in JSON schema returned by `./schema/{tld}`<br>Cannot convert domain label error<br>Domain is missing IDN script<br>Domain segment ends with dash<br>Domain starts with dash<br>Domain uses unsupported IDN script<br>End-user must read and consent to all of the following legal agreements<br>FQDN fails generic validity regex<br>Invalid character(s) error<br>Invalid period range<br>Invalid tld error<br>Non-IDN domain name must not have dashes at the third and fourth position<br>Reserved name error<br>`authCode` cannot be empty<br>`domain` must match `sld.tld`<br>domain must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "transferIn",
        "summary": "Purchase and start or restart transfer process"
      }
    },
    "/v1/domains/{domain}/verifyRegistrantEmail": {
      "post": {
        "tags": [
          "v1"
        ],
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/javascript",
          "application/xml",
          "text/javascript",
          "text/xml"
        ],
        "parameters": [
          {
            "description": "Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you're a Reseller, but purchased a Domain via http://www.godaddy.com",
            "in": "header",
            "name": "X-Shopper-Id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Domain whose Contact E-mail should be verified.",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful"
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "`domain` is not a valid Domain name",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "504": {
            "description": "Gateway timeout",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "verifyEmail",
        "summary": "Re-send Contact E-mail Verification for specified Domain"
      }
    },
    "/v2/customers/{customerId}/domains/forwards/{fqdn}": {
      "delete": {
        "tags": [
          "v2"
        ],
        "consumes": [
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id.",
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The fully qualified domain name whose forwarding details are to be deleted.",
            "in": "path",
            "name": "fqdn",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The domain status does not allow performing the operation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "A valid `fqdn` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "domainsForwardsDelete",
        "summary": "Submit a forwarding cancellation request for the given fqdn"
      },
      "get": {
        "tags": [
          "v2"
        ],
        "consumes": [
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id.",
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The fully qualified domain name whose forwarding details are to be retrieved.",
            "in": "path",
            "name": "fqdn",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optionally include all sub domains if the fqdn specified is a domain and not a sub domain.",
            "name": "includeSubs",
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Request was successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/DomainForwarding"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "A valid `fqdn` must be specified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "domainsForwardsGet",
        "summary": "Retrieve the forwarding information for the given fqdn"
      },
      "put": {
        "tags": [
          "v2"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Customer identifier<br/> Note: For API Resellers, performing actions on behalf of your customers, you need to specify the Subaccount you're operating on behalf of; otherwise use your shopper id.",
            "in": "path",
            "name": "customerId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The fully qualified domain name whose forwarding details are to be modified.",
            "in": "path",
            "name": "fqdn",
            "required": true,
            "type": "string"
          },
          {
            "description": "Domain forwarding rule to create or replace on the fqdn",
            "name": "body",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DomainForwardingCreate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request was successful"
          },
          "401": {
            "description": "Authentication info not sent or invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Authenticated user is not allowed access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "The domain status does not allow performing the operation",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Request body doesn't fulfill schema, see details in `fields`",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests received within interval",
            "schema": {
              "$ref": "#/definitions/ErrorLimit"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "operationId": "domainsForwardsPut",
        "summary": "Modify the forwarding information for the given fqdn"
      }
    }
  },
  "definitions": {
    "Address": {
      "properties": {
        "address1": {
          "format": "street-address",
          "type": "string"
        },
        "address2": {
          "format": "street-address2",
          "type": "string"
        },
        "city": {
          "format": "city-name",
          "type": "string"
        },
        "country": {
          "default": "US",
          "description": "Two-letter ISO country code to be used as a hint for target region<br/><br/>\nNOTE: These are sample values, there are many\n<a href='http://www.iso.org/iso/country_codes.htm'>more</a>",
          "enum": [
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AS",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CC",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CV",
            "CW",
            "CX",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FM",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HM",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KR",
            "KV",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MG",
            "MH",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MP",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NF",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PW",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "ST",
            "SV",
            "SX",
            "SZ",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TP",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "UM",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VI",
            "VN",
            "VU",
            "WF",
            "WS",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW"
          ],
          "format": "iso-country-code",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal or zip code",
          "format": "postal-code",
          "type": "string"
        },
        "state": {
          "description": "State or province or territory",
          "format": "state-province-territory",
          "type": "string"
        }
      },
      "required": [
        "address1",
        "city",
        "state",
        "postalCode",
        "country"
      ]
    },
    "ArrayOfDNSRecord": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DNSRecord"
      }
    },
    "Consent": {
      "properties": {
        "agreedAt": {
          "description": "Timestamp indicating when the end-user consented to these legal agreements",
          "format": "iso-datetime",
          "type": "string"
        },
        "agreedBy": {
          "description": "Originating client IP address of the end-user's computer when they consented to these legal agreements",
          "type": "string"
        },
        "agreementKeys": {
          "description": "Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "agreementKeys",
        "agreedBy",
        "agreedAt"
      ]
    },
    "Contact": {
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/Address"
        },
        "email": {
          "format": "email",
          "type": "string"
        },
        "fax": {
          "format": "phone",
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "nameFirst": {
          "format": "person-name",
          "type": "string"
        },
        "nameLast": {
          "format": "person-name",
          "type": "string"
        },
        "nameMiddle": {
          "type": "string"
        },
        "organization": {
          "format": "organization-name",
          "type": "string"
        },
        "phone": {
          "format": "phone",
          "type": "string"
        }
      },
      "required": [
        "nameFirst",
        "nameLast",
        "email",
        "phone",
        "addressMailing"
      ]
    },
    "DNSRecord": {
      "properties": {
        "data": {
          "type": "string"
        },
        "name": {
          "format": "domain",
          "type": "string"
        },
        "port": {
          "description": "Service port (SRV only)",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "priority": {
          "description": "Record priority (MX and SRV only)",
          "format": "integer-positive",
          "type": "integer"
        },
        "protocol": {
          "description": "Service protocol (SRV only)",
          "type": "string"
        },
        "service": {
          "description": "Service type (SRV only)",
          "type": "string"
        },
        "ttl": {
          "format": "integer-positive",
          "type": "integer"
        },
        "type": {
          "enum": [
            "A",
            "AAAA",
            "CNAME",
            "MX",
            "NS",
            "SOA",
            "SRV",
            "TXT"
          ],
          "type": "string"
        },
        "weight": {
          "description": "Record weight (SRV only)",
          "format": "integer-positive",
          "type": "integer"
        }
      },
      "required": [
        "type",
        "name",
        "data"
      ]
    },
    "DNSRecordCreateType": {
      "properties": {
        "data": {
          "type": "string"
        },
        "name": {
          "format": "domain",
          "type": "string"
        },
        "port": {
          "description": "Service port (SRV only)",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "priority": {
          "description": "Record priority (MX and SRV only)",
          "format": "integer-positive",
          "type": "integer"
        },
        "protocol": {
          "description": "Service protocol (SRV only)",
          "type": "string"
        },
        "service": {
          "description": "Service type (SRV only)",
          "type": "string"
        },
        "ttl": {
          "format": "integer-positive",
          "type": "integer"
        },
        "weight": {
          "description": "Record weight (SRV only)",
          "format": "integer-positive",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "data"
      ]
    },
    "DNSRecordCreateTypeName": {
      "properties": {
        "data": {
          "type": "string"
        },
        "port": {
          "description": "Service port (SRV only)",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "priority": {
          "description": "Record priority (MX and SRV only)",
          "format": "integer-positive",
          "type": "integer"
        },
        "protocol": {
          "description": "Service protocol (SRV only)",
          "type": "string"
        },
        "service": {
          "description": "Service type (SRV only)",
          "type": "string"
        },
        "ttl": {
          "format": "integer-positive",
          "type": "integer"
        },
        "weight": {
          "description": "Record weight (SRV only)",
          "format": "integer-positive",
          "type": "integer"
        }
      },
      "required": [
        "data"
      ]
    },
    "DomainAvailableBulk": {
      "properties": {
        "domains": {
          "description": "Domain available response array",
          "items": {
            "$ref": "#/definitions/DomainAvailableResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "domains"
      ]
    },
    "DomainAvailableBulkMixed": {
      "properties": {
        "domains": {
          "description": "Domain available response array",
          "items": {
            "$ref": "#/definitions/DomainAvailableResponse"
          },
          "type": "array"
        },
        "errors": {
          "description": "Errors encountered while performing a domain available check",
          "items": {
            "$ref": "#/definitions/DomainAvailableError"
          },
          "type": "array"
        }
      },
      "required": [
        "domains"
      ]
    },
    "DomainAvailableError": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "domain": {
          "description": "Domain name",
          "type": "string"
        },
        "message": {
          "description": "Human-readable, English description of the error",
          "type": "string"
        },
        "path": {
          "description": "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>",
          "format": "json-path",
          "type": "string"
        },
        "status": {
          "description": "HTTP status code that would return for a single check",
          "type": "integer"
        }
      },
      "required": [
        "code",
        "domain",
        "path",
        "status"
      ]
    },
    "DomainAvailableResponse": {
      "properties": {
        "available": {
          "description": "Whether or not the domain name is available",
          "type": "boolean"
        },
        "currency": {
          "default": "USD",
          "description": "Currency in which the `price` is listed. Only returned if tld is offered",
          "format": "iso-currency-code",
          "type": "string"
        },
        "definitive": {
          "description": "Whether or not the `available` answer has been definitively verified with the registry",
          "type": "boolean"
        },
        "domain": {
          "description": "Domain name",
          "type": "string"
        },
        "period": {
          "description": "Number of years included in the price. Only returned if tld is offered",
          "format": "integer-positive",
          "type": "integer"
        },
        "price": {
          "description": "Price of the domain excluding taxes or fees. Only returned if tld is offered",
          "format": "currency-micro-unit",
          "type": "integer"
        }
      },
      "required": [
        "domain",
        "available",
        "definitive"
      ]
    },
    "DomainContacts": {
      "properties": {
        "contactAdmin": {
          "$ref": "#/definitions/Contact"
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact"
        },
        "contactTech": {
          "$ref": "#/definitions/Contact"
        }
      },
      "required": [
        "contactRegistrant"
      ]
    },
    "DomainDetail": {
      "properties": {
        "authCode": {
          "description": "Authorization code for transferring the Domain",
          "type": "string"
        },
        "contactAdmin": {
          "$ref": "#/definitions/Contact",
          "description": "Administrative contact for the domain registration"
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact",
          "description": "Billing contact for the domain registration"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact",
          "description": "Registration contact for the domain"
        },
        "contactTech": {
          "$ref": "#/definitions/Contact",
          "description": "Technical contact for the domain registration"
        },
        "createdAt": {
          "description": "Date and time when this domain was created",
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "description": "Date and time when this domain was deleted",
          "format": "date-time",
          "type": "string"
        },
        "transferAwayEligibleAt": {
          "description": "Date and time when this domain is eligible to transfer",
          "format": "date-time",
          "type": "string"
        },
        "domain": {
          "description": "Name of the domain",
          "type": "string"
        },
        "domainId": {
          "description": "Unique identifier for this Domain",
          "format": "double",
          "type": "number"
        },
        "expirationProtected": {
          "description": "Whether or not the domain is protected from expiration",
          "type": "boolean"
        },
        "expires": {
          "description": "Date and time when this domain will expire",
          "format": "date-time",
          "type": "string"
        },
        "holdRegistrar": {
          "description": "Whether or not the domain is on-hold by the registrar",
          "type": "boolean"
        },
        "locked": {
          "description": "Whether or not the domain is locked to prevent transfers",
          "type": "boolean"
        },
        "nameServers": {
          "description": "Fully-qualified domain names for DNS servers",
          "items": {
            "format": "host-name",
            "type": "string"
          },
          "type": "array"
        },
        "privacy": {
          "description": "Whether or not the domain has privacy protection",
          "type": "boolean"
        },
        "renewAuto": {
          "description": "Whether or not the domain is configured to automatically renew",
          "type": "boolean"
        },
        "renewDeadline": {
          "description": "Date the domain must renew on",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>",
          "type": "string"
        },
        "subaccountId": {
          "description": "Reseller subaccount shopperid who can manage the domain",
          "type": "string"
        },
        "transferProtected": {
          "description": "Whether or not the domain is protected from transfer",
          "type": "boolean"
        },
        "verifications": {
          "$ref": "#/definitions/VerificationsDomain",
          "description": "Progress and status for each of the verification processes requested for this domain"
        }
      },
      "required": [
        "domainId",
        "domain",
        "status",
        "expirationProtected",
        "holdRegistrar",
        "locked",
        "privacy",
        "renewAuto",
        "renewDeadline",
        "transferProtected",
        "createdAt",
        "authCode",
        "nameServers",
        "contactRegistrant",
        "contactBilling",
        "contactAdmin",
        "contactTech"
      ]
    },
    "DomainPurchase": {
      "properties": {
        "consent": {
          "$ref": "#/definitions/Consent"
        },
        "contactAdmin": {
          "$ref": "#/definitions/Contact"
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact"
        },
        "contactTech": {
          "$ref": "#/definitions/Contact"
        },
        "domain": {
          "description": "For internationalized domain names with non-ascii characters, the domain name is converted to punycode before format and pattern validation rules are checked",
          "format": "domain",
          "type": "string"
        },
        "nameServers": {
          "items": {
            "format": "host-name",
            "type": "string"
          },
          "type": "array"
        },
        "period": {
          "default": 1,
          "format": "integer-positive",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "privacy": {
          "default": false,
          "type": "boolean"
        },
        "renewAuto": {
          "default": true,
          "type": "boolean"
        }
      },
      "required": [
        "domain",
        "consent"
      ]
    },
    "DomainPurchaseResponse": {
      "properties": {
        "currency": {
          "default": "USD",
          "description": "Currency in which the `total` is listed",
          "format": "iso-currency-code",
          "type": "string"
        },
        "itemCount": {
          "description": "Number items included in the order",
          "format": "integer-positive",
          "type": "integer"
        },
        "orderId": {
          "description": "Unique identifier of the order processed to purchase the domain",
          "format": "integer-positive",
          "type": "integer"
        },
        "total": {
          "description": "Total cost of the domain and any selected add-ons",
          "format": "currency-micro-unit",
          "type": "integer"
        }
      },
      "required": [
        "orderId",
        "itemCount",
        "total"
      ]
    },
    "DomainRenew": {
      "properties": {
        "period": {
          "description": "Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to `period` specified during original purchase",
          "format": "integer-positive",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        }
      }
    },
    "DomainSuggestion": {
      "properties": {
        "domain": {
          "description": "Suggested domain name",
          "type": "string"
        }
      },
      "required": [
        "domain"
      ]
    },
    "DomainSummary": {
      "properties": {
        "authCode": {
          "description": "Authorization code for transferring the Domain",
          "type": "string"
        },
        "contactAdmin": {
          "$ref": "#/definitions/Contact",
          "description": "Administrative contact for the domain registration"
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact",
          "description": "Billing contact for the domain registration"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact",
          "description": "Registration contact for the domain"
        },
        "contactTech": {
          "$ref": "#/definitions/Contact",
          "description": "Technical contact for the domain registration"
        },
        "createdAt": {
          "description": "Date and time when this domain was created",
          "format": "date-time",
          "type": "string"
        },
        "deletedAt": {
          "description": "Date and time when this domain was deleted",
          "format": "date-time",
          "type": "string"
        },
        "transferAwayEligibleAt": {
          "description": "Date and time when this domain is eligible to transfer",
          "format": "date-time",
          "type": "string"
        },
        "domain": {
          "description": "Name of the domain",
          "type": "string"
        },
        "domainId": {
          "description": "Unique identifier for this Domain",
          "format": "double",
          "type": "number"
        },
        "expirationProtected": {
          "description": "Whether or not the domain is protected from expiration",
          "type": "boolean"
        },
        "expires": {
          "description": "Date and time when this domain will expire",
          "format": "date-time",
          "type": "string"
        },
        "holdRegistrar": {
          "description": "Whether or not the domain is on-hold by the registrar",
          "type": "boolean"
        },
        "locked": {
          "description": "Whether or not the domain is locked to prevent transfers",
          "type": "boolean"
        },
        "nameServers": {
          "description": "Fully-qualified domain names for DNS servers",
          "items": {
            "format": "host-name",
            "type": "string"
          },
          "type": "array"
        },
        "privacy": {
          "description": "Whether or not the domain has privacy protection",
          "type": "boolean"
        },
        "renewAuto": {
          "description": "Whether or not the domain is configured to automatically renew",
          "type": "boolean"
        },
        "renewDeadline": {
          "description": "Date the domain must renew on",
          "format": "date-time",
          "type": "string"
        },
        "renewable": {
          "description": "Whether or not the domain is eligble for renewal based on status",
          "type": "boolean"
        },
        "status": {
          "description": "Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>",
          "type": "string"
        },
        "transferProtected": {
          "description": "Whether or not the domain is protected from transfer",
          "type": "boolean"
        }
      },
      "required": [
        "domainId",
        "domain",
        "status",
        "expirationProtected",
        "holdRegistrar",
        "locked",
        "privacy",
        "renewAuto",
        "renewDeadline",
        "transferProtected",
        "createdAt",
        "contactRegistrant"
      ]
    },
    "DomainForwardingMask": {
      "properties": {
        "title" : {
          "type": "string",
          "description": "Displays at the top of the browser window and in search results."
        },
        "description" : {
          "type": "string",
          "description": "A short description of your website to display in search engine results."
        },
        "keywords": {
          "type": "string",
          "description": "A list of comma-separated keywords that describes the content and purpose of your website."
        }
      }
    },
    "DomainForwardingCreate": {
      "properties": {
        "type": {
          "type": "string",
          "default": "REDIRECT_PERMANENT",
          "enum": [
            "MASKED",
            "REDIRECT_PERMANENT",
            "REDIRECT_TEMPORARY"
          ],
          "description": "The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>"
        },
        "url" : {
          "type": "string",
          "format": "url",
          "description": "Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)"
        },
        "mask": {
          "$ref": "#/definitions/DomainForwardingMask",
          "description": "Additional configuration that can be provided when type = 'MASKED'"
        }
      },
      "required": [
        "type",
        "url"
      ]
    },
    "DomainForwarding": {
      "properties": {
        "fqdn" : {
          "type": "string",
          "description": "The fqdn (domain or sub domain) to forward (ex somedomain.com or sub.somedomain.com)"
        },
        "type": {
          "type": "string",
          "default": "REDIRECT_PERMANENT",
          "enum": [
            "MASKED",
            "REDIRECT_PERMANENT",
            "REDIRECT_TEMPORARY"
          ],
          "description": "The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>"
        },
        "url" : {
          "type": "string",
          "format": "url",
          "description": "Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)"
        },
        "mask": {
          "$ref": "#/definitions/DomainForwardingMask",
          "description": "Additional configuration that can be provided when type = 'MASKED'"
        }
      },
      "required": [
        "fqdn",
        "type",
        "url"
      ]
    },
    "DomainTransferIn": {
      "properties": {
        "authCode": {
          "description": "Authorization code from registrar for transferring a domain",
          "type": "string"
        },
        "consent": {
          "$ref": "#/definitions/Consent",
          "description": "Required agreements can be retrieved via the GET ./domains/agreements endpoint"
        },
        "period": {
          "default": 1,
          "description": "Can be more than 1 but no more than 10 years total including current registration length",
          "format": "integer-positive",
          "maximum": 10,
          "minimum": 1,
          "type": "integer"
        },
        "privacy": {
          "default": false,
          "description": "Whether or not privacy has been requested",
          "type": "boolean"
        },
        "renewAuto": {
          "default": true,
          "description": "Whether or not the domain should be configured to automatically renew",
          "type": "boolean"
        },
        "contactAdmin": {
          "$ref": "#/definitions/Contact",
          "description": "The contact to use for the domain admin contact. Depending on the tld of the domain being transferred, this field may be required."
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact",
          "description": "The contact to use for the domain billing contact. Depending on the tld of the domain being transferred, this field may be required."
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact",
          "description": "The contact to use for the domain registrant contact. Depending on the tld of the domain being transferred, this field may be required."
        },
        "contactTech": {
          "$ref": "#/definitions/Contact",
          "description": "The contact to use for the domain tech contact. Depending on the tld of the domain being transferred, this field may be required."
        }
      },
      "required": [
        "authCode",
        "consent"
      ]
    },
    "DomainUpdate": {
      "properties": {
        "locked": {
          "description": "Whether or not the domain should be locked to prevent transfers",
          "type": "boolean"
        },
        "nameServers": {
          "description": "Fully-qualified domain names for Name Servers to associate with the domain",
          "items": {
            "format": "host-name"
          },
          "type": "array"
        },
        "renewAuto": {
          "description": "Whether or not the domain should be configured to automatically renew",
          "type": "boolean"
        },
        "subaccountId": {
          "description": "Reseller subaccount shopperid who can manage the domain",
          "type": "string"
        }
      }
    },
    "DomainsContactsBulk": {
      "properties": {
        "contactAdmin": {
          "$ref": "#/definitions/Contact"
        },
        "contactBilling": {
          "$ref": "#/definitions/Contact"
        },
        "contactPresence": {
          "$ref": "#/definitions/Contact"
        },
        "contactRegistrant": {
          "$ref": "#/definitions/Contact"
        },
        "contactTech": {
          "$ref": "#/definitions/Contact"
        },
        "domains": {
          "description": "An array of domain names to be validated against. Alternatively, you can specify the extracted tlds. However, full domain names are required if the tld is `uk`",
          "items": {
            "format": "domain",
            "type": "string"
          },
          "type": "array"
        },
        "entityType": {
          "description": "Canadian Presence Requirement (CA)",
          "enum": [
            "ABORIGINAL",
            "ASSOCIATION",
            "CITIZEN",
            "CORPORATION",
            "EDUCATIONAL",
            "GOVERNMENT",
            "HOSPITAL",
            "INDIAN_BAND",
            "LEGAL_REPRESENTATIVE",
            "LIBRARY_ARCHIVE_MUSEUM",
            "MARK_REGISTERED",
            "MARK_TRADE",
            "PARTNERSHIP",
            "POLITICAL_PARTY",
            "RESIDENT_PERMANENT",
            "TRUST",
            "UNION"
          ],
          "type": "string"
        }
      },
      "required": [
        "domains"
      ]
    },
    "Error": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "fields": {
          "description": "List of the specific fields, and the errors found with their contents",
          "items": {
            "$ref": "#/definitions/ErrorField"
          },
          "type": "array"
        },
        "message": {
          "description": "Human-readable, English description of the error",
          "type": "string"
        }
      },
      "required": [
        "code"
      ]
    },
    "ErrorDomainContactsValidate": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "fields": {
          "description": "List of the specific fields, and the errors found with their contents",
          "items": {
            "$ref": "#/definitions/ErrorFieldDomainContactsValidate"
          },
          "type": "array"
        },
        "message": {
          "description": "Human-readable, English description of the error",
          "type": "string"
        },
        "stack": {
          "description": "Stack trace indicating where the error occurred.<br/>NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments. However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "code"
      ]
    },
    "ErrorField": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "message": {
          "description": "Human-readable, English description of the problem with the contents of the field",
          "type": "string"
        },
        "path": {
          "description": "<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>",
          "format": "json-path",
          "type": "string"
        },
        "pathRelated": {
          "description": "JSONPath referring to a field containing an error, which is referenced by `path`",
          "format": "json-path",
          "type": "string"
        }
      },
      "required": [
        "path",
        "code"
      ]
    },
    "ErrorFieldDomainContactsValidate": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "domains": {
          "description": "An array of domain names the error is for. If tlds are specified in the request, `domains` will contain tlds. For example, if `domains` in request is [\"test1.com\", \"test2.uk\", \"net\"], and the field is invalid for com and net, then one of the `fields` in response will have [\"test1.com\", \"net\"] as `domains`",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message": {
          "description": "Human-readable, English description of the problem with the contents of the field",
          "type": "string"
        },
        "path": {
          "description": "1) JSONPath referring to the field within the data containing an error<br/>or<br/>2) JSONPath referring to an object containing an error",
          "format": "json-path",
          "type": "string"
        },
        "pathRelated": {
          "description": "JSONPath referring to the field on the object referenced by `path` containing an error",
          "format": "json-path",
          "type": "string"
        }
      },
      "required": [
        "code",
        "domains",
        "path"
      ]
    },
    "ErrorLimit": {
      "properties": {
        "code": {
          "description": "Short identifier for the error, suitable for indicating the specific error within client code",
          "format": "constant",
          "type": "string"
        },
        "fields": {
          "description": "List of the specific fields, and the errors found with their contents",
          "items": {
            "$ref": "#/definitions/ErrorField"
          },
          "type": "array"
        },
        "message": {
          "description": "Human-readable, English description of the error",
          "type": "string"
        },
        "retryAfterSec": {
          "description": "Number of seconds to wait before attempting a similar request",
          "format": "integer-positive",
          "type": "integer"
        }
      },
      "required": [
        "retryAfterSec",
        "code"
      ]
    },
    "JsonDataType": {
      "properties": {
        "format": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "$ref"
      ]
    },
    "JsonProperty": {
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/JsonDataType"
          },
          "type": "object"
        },
        "maxItems": {
          "type": "integer"
        },
        "maximum": {
          "type": "integer"
        },
        "minItems": {
          "type": "integer"
        },
        "minimum": {
          "type": "integer"
        },
        "pattern": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "$ref",
        "required"
      ]
    },
    "JsonSchema": {
      "properties": {
        "id": {
          "type": "string"
        },
        "models": {
          "items": {
            "$ref": "#/definitions/JsonSchema"
          },
          "type": "object"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/JsonProperty"
          },
          "type": "object"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "properties",
        "required",
        "models"
      ]
    },
    "LegalAgreement": {
      "properties": {
        "agreementKey": {
          "description": "Unique identifier for the legal agreement",
          "type": "string"
        },
        "content": {
          "description": "Contents of the legal agreement, suitable for embedding",
          "type": "string"
        },
        "title": {
          "description": "Title of the legal agreement",
          "type": "string"
        },
        "url": {
          "description": "URL to a page containing the legal agreement",
          "format": "url",
          "type": "string"
        }
      },
      "required": [
        "agreementKey",
        "title",
        "content"
      ]
    },
    "PrivacyPurchase": {
      "properties": {
        "consent": {
          "$ref": "#/definitions/Consent",
          "description": "Specify agreement `DNPA`.  Required agreements can be retrieved via the GET ./domains/agreements endpoint"
        }
      },
      "required": [
        "consent"
      ]
    },
    "RealNameValidation": {
      "properties": {
        "status": {
          "enum": [
            "APPROVED",
            "PENDING",
            "PENDING_ASSOCIATION_WITH_DOMAIN",
            "PENDING_SUBMISSION_TO_VERIFICATION_SERVICE",
            "PENDING_VERIFICATION_SERVICE_REPLY",
            "PENDING_SUBMISSION_TO_REGISTRY",
            "PENDING_REGISTRY_REPLY",
            "PENDING_DOMAIN_UPDATE",
            "REJECTED"
          ],
          "type": "string"
        }
      }
    },
    "TldSummary": {
      "properties": {
        "name": {
          "description": "Name of the top-level domain",
          "format": "tld",
          "type": "string"
        },
        "type": {
          "default": "GENERIC",
          "description": "Type of the top-level domain",
          "enum": [
            "COUNTRY_CODE",
            "GENERIC"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "VerificationDomainName": {
      "properties": {
        "status": {
          "description": "Status of the domain name verification",
          "enum": [
            "APPROVED",
            "PENDING",
            "REJECTED",
            "UNABLE_TO_RETRIEVE_STATUS"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "VerificationRealName": {
      "properties": {
        "status": {
          "description": "Status of the real name verification<br/><ul> <li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li> <li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li> <li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear name on your uploaded document, please upload a different document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li> <li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li> </ul>",
          "enum": [
            "APPROVED",
            "PENDING",
            "REJECTED_DOCUMENT_OUTDATED",
            "REJECTED_EXPIRED_BUSINESS_LICENSE",
            "REJECTED_EXPIRED_ORGANIZATION_CODE",
            "REJECTED_ILLEGIBLE_DOCUMENT_NAME",
            "REJECTED_ILLEGIBLE_IDENTIFICATION",
            "REJECTED_INCOMPLETE_IDENTIFICATION",
            "REJECTED_INCOMPLETE_REGISTRATION_LETTER",
            "REJECTED_INCONSISTENT_IDENTITY_CARD",
            "REJECTED_INCONSISTENT_ORGANIZATION_CODE",
            "REJECTED_INCONSISTENT_REGISTRANT_NAME",
            "REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE",
            "REJECTED_INVALID_DOCUMENT",
            "REJECTED_MISMATCH_BUSINESS_ID",
            "REJECTED_MISMATCH_BUSINESS_NAME",
            "REJECTED_MISMATCH_DOCUMENT_ID",
            "REJECTED_MISMATCH_DOCUMENT_NAME",
            "REJECTED_MISMATCH_DOCUMENT_TYPE",
            "REJECTED_MISMATCH_REGISTRANT_INFO",
            "REJECTED_MISMATCH_REGISTRANT_LOCALITY",
            "REJECTED_MISMATCH_REGISTRANT_NAME",
            "REJECTED_UNABLE_TO_OPEN",
            "REJECTED_UNABLE_TO_VERIFY",
            "REJECTED_UNKNOWN_ERROR",
            "UNABLE_TO_RETRIEVE_STATUS"
          ],
          "type": "string"
        }
      },
      "required": [
        "status"
      ]
    },
    "VerificationsDomain": {
      "properties": {
        "domainName": {
          "$ref": "#/definitions/VerificationDomainName",
          "description": "Verification of domain name against a prohibited list maintained by the government"
        },
        "realName": {
          "$ref": "#/definitions/VerificationRealName",
          "description": "Verification of identity by comparing registration data against government issued documents"
        }
      }
    },
    "domain": {
      "properties": {
        "id": {
          "format": "double",
          "type": "number"
        }
      }
    }
  }
}